Introduction:
  What we will learn:
    How AWS ELB optimizes the distribution of incoming application traffic across multiple targets. 
      such as EC2 instances, containers, and IP addresses. 
        Ensuring high availability and fault tolerance.
AWS Elastic Load Balancing Introduction:
  What is Load Balancing:
    Server forward internet traffic to multiple servers -EC2 Instances-.
  Why Use a Load Balancer:
    Spread load across multiple instances.
    Expose a single point of access -DNS- to your application.
    Handle instances failures.
    Do regular health checks on your instances.
    Provide SSL termination-HTTPS for your websites.
    Enforce stickiness with cookies.
    Ensure high availability across zones.
    Separate public traffic from private traffic.
  EC2 Load Balancer:
    Called ELB -EC2 Load Balancer- is a managed load balancer:
      AWS guarantees its work, upgrades, maintenance, high availability.
    It is integrated with many AWS offerings-services.
  Types of Load Balancers on AWS
    Classic Load Balancer -v1- in 2009, the old generation.
      Deprecated.
    Application Load Balancer -v2- 2016, new generation.
    Network Load Balancer -v2- 2017, new generation.
      Recommendation: Use newer -v2- generation load balancers for more features.
      You can set up internal -private- or external -public- ELBs.
  Health Checks
    Crucial for load balancers.
    Allow the LB to know if instances it forwards traffic to are available to reply to requests.
    The health check is done on a port and a route -health is common-.
    If the response is not 200 -OK-, the instance is unhealthy.
  Application Load Balancer -v2-:
    Layer 7.
    Support SLL certificates and provide SSL termination.
    Load balancing to multiple HTTP applications across machines -target groups-.
      Target Groups:
        Logical groups used with Elastic Load Balancers -ELB-. 
          Directing traffic to specific resources -targets-. 
        Targets can include EC2 instances, containers, Lambda functions, or IP addresses. 
        Key Points about Target Groups:
          Association with Load Balancers:
            Target groups define how incoming traffic is routed to backend resources. 
              By working with one of the following:
                Application Load Balancers -ALB-.
                Network Load Balancers -NLB-.
                Gateway Load Balancers -GLB-.
          Target Types:
            Instance: 
              Targets are specific EC2 instances.
            IP Address: 
              Targets are identified by specific IP addresses. 
                Even outside AWS like on-premises resources.
            Lambda Function: ALB can route requests to AWS Lambda functions.
          Health Checks:
            Target groups include health check configurations.
              Monitoring the availability of targets.
              Ensuring traffic is routed only to healthy ones.
          Use Cases:
            Separate applications or microservices: 
              You can route different URL paths like `/api` and `/web` to different target groups.
            Load balancing across multiple environments like dev and prod.
              By associating target groups with different sets of resources.
          Targets are Registered with Target Groups:
            Resources like EC2 instances or IPs must be registered with a target group.
              To receive traffic from the load balancer.
          Listener Rules and Target Groups:
            Determine how the load balancer forwards traffic to specific target groups.
              Based on path-based or host-based routing criteria.
        Example:
          Two microservices.
            One for handling API requests `/api`.
            Another for handling static web content `/static`. 
              You could create two target groups:
                TG 1: Routes traffic for `/api` to your EC2 instances running the API service.
                TG 2: Routes traffic for `/static` to your EC2 instances hosting static files.
        Target groups act as the link between load balancers and the backend resources they manage.
    Load balancing to multiple applications on the same machine -containers-.
    Load balancing based on route in the URL.
      Directs traffic based on the URL path.
    Load balancing based on hostname in the URL.
    Good for microservices and container-based applications like Docker and Amazon ECS.
    Port mapping feature to redirect to a dynamic port.
    Classic Load Balancers required creating one load balancer per application.
      Expensive and inefficient.
    Stickiness: Can be enabled at the target group level.
      Same request goes to the same instance.
      Stickiness generated by the ALB, not the application.
    Supports Protocols: HTTP-HTTPS and Web sockets.
    True IP of client inserted in header X-Forwarded-For.
    Port and protocol in headers X-Forwarded-Port and X-Forwarded-Proto.
  Network Load Balancer -v2-
    Layer 4.
    Support SLL certificates and provide SSL termination.
    Lower latency.
    Forwarding TCP traffic to your instances.
    Handling millions of requests per second.
    Support for static IP or elastic IP.
      Static IP is Fixed and reliable; best for consistent service access.
      Elastic IP: 
        Specific type of static IP address provided by cloud service providers -like AWS-.
        Can be easily remapped to different instances or services.
        Ideal for cloud-based applications requiring quick reassignment without downtime.
    Mostly used for extreme performance; not the default load balancer choice.
    NLB directly sees the client IP.
  SLL Certificate:
    Authenticate website identity and encrypt data exchanged between users and the server.
    Enhance security, build user trust -padlock icon-, and improve SEO rankings.
  SLL termination:
    Process where SSL connections are decrypted at a load balancer instead of web servers.
    Offloads encryption-decryption tasks. 
      Simplifying certificate management and improving performance.
    Allows easier scalability as traffic increases.
  Good To Know:
    Any Load Balancer -CLB, ALB, NLB- has a static hostname.
      Do not resolve and use the underlying IP.
    Load balancers can scale but not instantaneously.
      You should contact AWS for a "warm-up."
    4xx errors are client-induced errors.
    5xx errors are application-induced errors:
      LB Errors 503 means that there is an error at capacity or no registered target.
    If the load balancer can’t connect to your application, check your security groups.
Load Balancing & Auto Scaling Groups
  Load Balancers: An Introduction
    Load Balancers: 
      Servers that distribute incoming internet traffic across multiple downstream servers. 
        Such as EC2 Instances 
          For load balancing.
    Use a load balancer to:
      Distribute traffic across multiple downstream instances.
      Provide a single point of access -DNS- to your application.
      Seamlessly handle failures of downstream instances.
      Regular health checks on instances.
      SSL termination -HTTPS- for websites.
      Ensure high availability across zones.
  Why use an elastic load balancer?
    ELB -Elastic Load Balancer- is a managed load balancer provided by AWS.
    AWS ensures its functionality, handling upgrades, maintenance, and high availability.
    Configuration options are limited. 
      It reduces the effort and cost of setting up and maintaining your own load balancer.
  AWS offers four types of load balancers:
    Application Load Balancer -ALB-: 
      For HTTP-HTTPS traffic, operates at Layer 7.
    Network Load Balancer -NLB-: 
      For ultra-high performance, supports TCP traffic, operates at Layer 4.
    Gateway Load Balancer: 
      Operates at Layer 3.
    Classic Load Balancer: 
      Supports both Layer 4 and 7 traffic, retired in 2023.
  Auto Scaling Groups: An Introduction
    Load on websites and applications can fluctuate.
    In the cloud, servers can be quickly provisioned or decommissioned.
    The goal of an -ASG- is to:
      Scale out -add EC2 instances- to handle increased load.
      Scale in -remove EC2 instances- to reduce excess capacity.
      Maintain a specified minimum and maximum number of instances.
      Automatically register new instances with a load balancer.
      Replace unhealthy instances to ensure reliability.
      Help to optimize capacity and reduce costs. 
        By running only the necessary number of instances.
  Auto-Scaling Groups: Scaling Strategies
    Manual Scaling: 
      Adjust the size of an Auto Scaling Group -ASG- manually as needed.
    Dynamic Scaling: 
      Automatically respond to changing demand with different strategies:
        Simple - Step Scaling:
          Add or remove a specific number of instances when a CloudWatch alarm is triggered. 
            For example add 2 units if CPU > 70%, remove 1 unit if CPU < 30%.
        Target Tracking Scaling:
          Automatically adjust the number of instances to maintain a target metric. 
            For example keep the average ASG CPU utilization around 40%.
        Scheduled Scaling:
          Plan for scaling actions based on known usage patterns.
            For example increase the minimum capacity to 10 at 5 pm on Fridays.
        Predictive Scaling:
          Utilizes Machine Learning to forecast future traffic.
          Automatically provisions the appropriate number of EC2 instances in advance. 
            To meet predicted demand.
Summary
  Elastic Load Balancing & Auto-Scaling Groups Summary
    High Availability vs Scalability -Vertical and Horizontal- vs Elasticity vs Agility:
      High Availability: 
        Ensuring continuous operation and minimal downtime. 
        Often through redundancy across multiple Availability Zones -AZs-.
      Scalability:
        Vertical: 
          Increasing the size or capacity of existing resources like upgrading an EC2 instance.
        Horizontal: 
          Adding more resources to handle increased load like adding more EC2 instances.
      Elasticity: 
        Automatically scaling resources up or down based on demand. 
        Ensuring optimal resource utilization.
      Agility: 
        The ability to rapidly provision and de-provision resources. 
          Adapting to changing business needs.
  Elastic Load Balancers -ELB-:
    Distribute incoming traffic across multiple backend EC2 instances. 
      Supporting Multi-AZ deployments.
    Perform health checks to ensure traffic is directed to healthy instances.
  Types of ELBs:
    Classic -deprecated-: 
      Basic load balancing across EC2 instances.
    Application -L7-: 
      Advanced load balancing with features like content-based routing for HTTP-HTTPS traffic.
    Network -L4-: 
      High-performance load balancing for TCP traffic.
    Gateway -L3-: 
      Load balancing for inter-VPC traffic and AWS Transit Gateway.
        AWS Transit Gateway: 
          Networking service that connects thousands of Amazon VPCs and on-premises networks. 
            Using a single gateway.
    Auto Scaling Groups -ASG-:
      Implement elasticity for applications across multiple AZs.
      Automatically scale EC2 instances based on demand and replace unhealthy instances.
      Integrated with ELB. 
        Ensuring that new instances are registered and traffic is balanced efficiently.
Recap Exam:
  Quiz:
    Quiz Q&A:
      Q1:
        The question:
          A company deployed an application on an Amazon EC2 instance. 
          The application ran as expected for 6 months in the past week, 
          users have reported latency issues. 
          A system administrator found that the CPU utilization was at 100% during business hours. 
          The company wants a scalable solution to meet demand. 
          Which AWS service or feature should the company use 
          to handle the load for its application during periods of high demand?
        Options:
          Auto Scaling groups. ✔️
          AWS Global Accelerator.
          Amazon Route 53.
          An Elastic IP address.
      Q2:
        The question:
          An online retail company wants to migrate its on-premises workload to AWS. 
          The company needs to automatically handle a seasonal workload increase 
          in a cost- effective manner. 
          Which AWS Cloud features will help the company meet this requirement?
        Options:
          Cross-Region workload deployment.
          N/A.
          Built-in AWS CloudTrail audit capabilities.
          Auto Scaling policies. ✔️
      Q3:
        The question:
          What technology enables compute capacity to adjust as loads change?
        Options:
          Load balancing.
          Automatic failover.
          Round robin.
          Auto Scaling. ✔️
      Q4:
        The question:
          Why is it beneficial to use Elastic Load Balancers with applications?
        Options:
          They allow for the conversion from Application Load Balancers to Classic Load Balancers.
          They are capable of handling constant changes in network traffic patterns. ✔️
          They automatically adjust capacity.
          They are provided at no charge to users.
      Q5:
        The question:
          How does Amazon EC2 Auto Scaling enhance application availability?
        Options:
          By automatically provisioning additional EC2 instances based on demand. ✔️
          By automatically scaling down EC2 instances during periods of low demand.
          By providing built-in load balancing capabilities for EC2 instances.
          By automatically updating the operating.
      Q6:
        The question:
          Which AWS managed service can be used to 
          distribute traffic between one or more Amazon EC2 instances?
        Options:
          NAT gateway.
          Elastic Load Balancing. ✔️
          Amazon Athena.
          AWS PrivateLink.
      Q7:
        The question:
          Which of the following are benefits of Amazon EC2 Auto Scaling?
        Options:
          Improved health and availability of applications. ✔️
          Reduced network latency. Manara potential error ❌
          Cross-Region Replication.
          Automated snapshots of data.